package com.jpmorgan.codingtest.developerTest.services;

import static org.junit.Assert.assertFalse;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.validation.constraints.AssertTrue;

import org.easymock.EasyMockRunner;
import org.easymock.TestSubject;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;

import com.jpmorgan.codingtest.developerTest.domain.Position;
import com.jpmorgan.codingtest.developerTest.domain.TradeEvent;
import com.poiji.bind.Poiji;

import static org.junit.Assert.*;

@RunWith(EasyMockRunner.class)
public class PositioningRulesServiceImplTest {
	
	@TestSubject
	PositioningRulesServiceImpl positioningRulesServiceImpl = new PositioningRulesServiceImpl();
	
	List<TradeEvent> tradeEvents = new ArrayList<TradeEvent>();

	@Before
	public void setUp(){
		tradeEvents = Poiji.fromExcel(new File("/Users/sandeep/Documents/Archu/jpmorganTest/TradeEventInput.xlsx"), TradeEvent.class);
	}
	
	@Test
	public void processTradesToPositionNotNull(){
		List<Position> positions = positioningRulesServiceImpl.processTradesToPosition(tradeEvents);
		positions.size();
		assertFalse(positions.isEmpty());
	}
	
	@Test
	public void processTradesToPositionValidateByTrade(){
		List<Position> actualPositions = positioningRulesServiceImpl.processTradesToPosition(tradeEvents);
		List<Position> expectedPosition = Poiji.fromExcel(new File("/Users/sandeep/Documents/Archu/jpmorganTest/TradeAggregationOutput.xls"), Position.class);
		Collections.sort(actualPositions);
		Collections.sort(expectedPosition);
		assertArrayEquals(actualPositions.toArray(), expectedPosition.toArray());
	}
	
}
